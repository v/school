Terminals unused in grammar

   BOOL
   XOR
   NOT


Grammar

    0 $accept: program $end

    1 $@1: /* empty */

    2 program: $@1 PROG ID ';' block PERIOD

    3 block: variables cmpdstmt

    4 variables: /* empty */
    5          | VAR vardcls

    6 vardcls: vardcls vardcl ';'
    7        | vardcl ';'
    8        | error ';'

    9 vardcl: ID tail

   10 tail: ',' ID tail
   11     | ':' type

   12 type: ARRAY '[' ICONST RANGE ICONST ']' OF stype
   13     | stype

   14 stype: INT
   15      | BOOLEAN

   16 stmtlist: stmtlist ';' stmt
   17         | stmt
   18         | error

   19 stmt: ifstmt
   20     | wstmt
   21     | fstmt
   22     | astmt
   23     | writestmt
   24     | cmpdstmt

   25 $@2: /* empty */

   26 cmpdstmt: $@2 BEG stmtlist END

   27 ifstmt: ifhead THEN stmt

   28 $@3: /* empty */

   29 ifstmt: ifhead THEN stmt ELSE $@3 stmt

   30 ifhead: IF condexp

   31 writestmt: WRITELN '(' exp ')'

   32 $@4: /* empty */

   33 $@5: /* empty */

   34 wstmt: WHILE $@4 condexp $@5 DO stmt

   35 fstmt: FOR ID ASG ICONST ',' ICONST DO astmt

   36 astmt: lvalue ASG exp

   37 lvalue: ID
   38       | ID '[' exp ']'

   39 exp: exp '+' exp
   40    | exp '-' exp
   41    | exp '*' exp
   42    | exp AND exp
   43    | exp OR exp
   44    | exp EXOR exp
   45    | '(' exp ')'
   46    | ID
   47    | ID '[' exp ']'
   48    | constant
   49    | error

   50 condexp: exp NEQ exp
   51        | exp EQ exp
   52        | exp LT exp
   53        | exp LEQ exp
   54        | error

   55 constant: ICONST
   56         | boolean_constant

   57 boolean_constant: TRUE
   58                 | FALSE


Terminals, with rules where they appear

$end (0) 0
'(' (40) 31 45
')' (41) 31 45
'*' (42) 41
'+' (43) 39
',' (44) 10 35
'-' (45) 40
':' (58) 11
';' (59) 2 6 7 8 16
'[' (91) 12 38 47
']' (93) 12 38 47
error (256) 8 18 49 54
PROG (258) 2
PERIOD (259) 2
VAR (260) 5
INT (261) 14
BOOL (262)
ARRAY (263) 12
RANGE (264) 12
OF (265) 12
WRITELN (266) 31
THEN (267) 27 29
IF (268) 30
BEG (269) 26
END (270) 26
ASG (271) 35 36
DO (272) 34 35
FOR (273) 35
EQ (274) 51
NEQ (275) 50
LT (276) 52
LEQ (277) 53
AND (278) 42
OR (279) 43
XOR (280)
NOT (281)
TRUE (282) 57
FALSE (283) 58
ELSE (284) 29
WHILE (285) 34
BOOLEAN (286) 15
EXOR (287) 44
ID (288) 2 9 10 35 37 38 46 47
ICONST (289) 12 35 55


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 2, on right: 0
$@1 (47)
    on left: 1, on right: 2
block (48)
    on left: 3, on right: 2
variables (49)
    on left: 4 5, on right: 3
vardcls (50)
    on left: 6 7 8, on right: 5 6
vardcl (51)
    on left: 9, on right: 6 7
tail (52)
    on left: 10 11, on right: 9 10
type (53)
    on left: 12 13, on right: 11
stype (54)
    on left: 14 15, on right: 12 13
stmtlist (55)
    on left: 16 17 18, on right: 16 26
stmt (56)
    on left: 19 20 21 22 23 24, on right: 16 17 27 29 34
cmpdstmt (57)
    on left: 26, on right: 3 24
$@2 (58)
    on left: 25, on right: 26
ifstmt (59)
    on left: 27 29, on right: 19
$@3 (60)
    on left: 28, on right: 29
ifhead (61)
    on left: 30, on right: 27 29
writestmt (62)
    on left: 31, on right: 23
wstmt (63)
    on left: 34, on right: 20
$@4 (64)
    on left: 32, on right: 34
$@5 (65)
    on left: 33, on right: 34
fstmt (66)
    on left: 35, on right: 21
astmt (67)
    on left: 36, on right: 22 35
lvalue (68)
    on left: 37 38, on right: 36
exp (69)
    on left: 39 40 41 42 43 44 45 46 47 48 49, on right: 31 36 38 39
    40 41 42 43 44 45 47 50 51 52 53
condexp (70)
    on left: 50 51 52 53 54, on right: 30 34
constant (71)
    on left: 55 56, on right: 48
boolean_constant (72)
    on left: 57 58, on right: 56


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    2 program: $@1 . PROG ID ';' block PERIOD

    PROG  shift, and go to state 4


state 3

    0 $accept: program $end .

    $default  accept


state 4

    2 program: $@1 PROG . ID ';' block PERIOD

    ID  shift, and go to state 5


state 5

    2 program: $@1 PROG ID . ';' block PERIOD

    ';'  shift, and go to state 6


state 6

    2 program: $@1 PROG ID ';' . block PERIOD

    VAR  shift, and go to state 7

    $default  reduce using rule 4 (variables)

    block      go to state 8
    variables  go to state 9


state 7

    5 variables: VAR . vardcls

    error  shift, and go to state 10
    ID     shift, and go to state 11

    vardcls  go to state 12
    vardcl   go to state 13


state 8

    2 program: $@1 PROG ID ';' block . PERIOD

    PERIOD  shift, and go to state 14


state 9

    3 block: variables . cmpdstmt

    $default  reduce using rule 25 ($@2)

    cmpdstmt  go to state 15
    $@2       go to state 16


state 10

    8 vardcls: error . ';'

    ';'  shift, and go to state 17


state 11

    9 vardcl: ID . tail

    ','  shift, and go to state 18
    ':'  shift, and go to state 19

    tail  go to state 20


state 12

    5 variables: VAR vardcls .
    6 vardcls: vardcls . vardcl ';'

    ID  shift, and go to state 11

    $default  reduce using rule 5 (variables)

    vardcl  go to state 21


state 13

    7 vardcls: vardcl . ';'

    ';'  shift, and go to state 22


state 14

    2 program: $@1 PROG ID ';' block PERIOD .

    $default  reduce using rule 2 (program)


state 15

    3 block: variables cmpdstmt .

    $default  reduce using rule 3 (block)


state 16

   26 cmpdstmt: $@2 . BEG stmtlist END

    BEG  shift, and go to state 23


state 17

    8 vardcls: error ';' .

    $default  reduce using rule 8 (vardcls)


state 18

   10 tail: ',' . ID tail

    ID  shift, and go to state 24


state 19

   11 tail: ':' . type

    INT      shift, and go to state 25
    ARRAY    shift, and go to state 26
    BOOLEAN  shift, and go to state 27

    type   go to state 28
    stype  go to state 29


state 20

    9 vardcl: ID tail .

    $default  reduce using rule 9 (vardcl)


state 21

    6 vardcls: vardcls vardcl . ';'

    ';'  shift, and go to state 30


state 22

    7 vardcls: vardcl ';' .

    $default  reduce using rule 7 (vardcls)


state 23

   26 cmpdstmt: $@2 BEG . stmtlist END

    error    shift, and go to state 31
    WRITELN  shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    WHILE    shift, and go to state 35
    ID       shift, and go to state 36

    BEG  reduce using rule 25 ($@2)

    stmtlist   go to state 37
    stmt       go to state 38
    cmpdstmt   go to state 39
    $@2        go to state 16
    ifstmt     go to state 40
    ifhead     go to state 41
    writestmt  go to state 42
    wstmt      go to state 43
    fstmt      go to state 44
    astmt      go to state 45
    lvalue     go to state 46


state 24

   10 tail: ',' ID . tail

    ','  shift, and go to state 18
    ':'  shift, and go to state 19

    tail  go to state 47


state 25

   14 stype: INT .

    $default  reduce using rule 14 (stype)


state 26

   12 type: ARRAY . '[' ICONST RANGE ICONST ']' OF stype

    '['  shift, and go to state 48


state 27

   15 stype: BOOLEAN .

    $default  reduce using rule 15 (stype)


state 28

   11 tail: ':' type .

    $default  reduce using rule 11 (tail)


state 29

   13 type: stype .

    $default  reduce using rule 13 (type)


state 30

    6 vardcls: vardcls vardcl ';' .

    $default  reduce using rule 6 (vardcls)


state 31

   18 stmtlist: error .

    $default  reduce using rule 18 (stmtlist)


state 32

   31 writestmt: WRITELN . '(' exp ')'

    '('  shift, and go to state 49


state 33

   30 ifhead: IF . condexp

    error   shift, and go to state 50
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 56
    condexp           go to state 57
    constant          go to state 58
    boolean_constant  go to state 59


state 34

   35 fstmt: FOR . ID ASG ICONST ',' ICONST DO astmt

    ID  shift, and go to state 60


state 35

   34 wstmt: WHILE . $@4 condexp $@5 DO stmt

    $default  reduce using rule 32 ($@4)

    $@4  go to state 61


state 36

   37 lvalue: ID .
   38       | ID . '[' exp ']'

    '['  shift, and go to state 62

    $default  reduce using rule 37 (lvalue)


state 37

   16 stmtlist: stmtlist . ';' stmt
   26 cmpdstmt: $@2 BEG stmtlist . END

    END  shift, and go to state 63
    ';'  shift, and go to state 64


state 38

   17 stmtlist: stmt .

    $default  reduce using rule 17 (stmtlist)


state 39

   24 stmt: cmpdstmt .

    $default  reduce using rule 24 (stmt)


state 40

   19 stmt: ifstmt .

    $default  reduce using rule 19 (stmt)


state 41

   27 ifstmt: ifhead . THEN stmt
   29       | ifhead . THEN stmt ELSE $@3 stmt

    THEN  shift, and go to state 65


state 42

   23 stmt: writestmt .

    $default  reduce using rule 23 (stmt)


state 43

   20 stmt: wstmt .

    $default  reduce using rule 20 (stmt)


state 44

   21 stmt: fstmt .

    $default  reduce using rule 21 (stmt)


state 45

   22 stmt: astmt .

    $default  reduce using rule 22 (stmt)


state 46

   36 astmt: lvalue . ASG exp

    ASG  shift, and go to state 66


state 47

   10 tail: ',' ID tail .

    $default  reduce using rule 10 (tail)


state 48

   12 type: ARRAY '[' . ICONST RANGE ICONST ']' OF stype

    ICONST  shift, and go to state 67


state 49

   31 writestmt: WRITELN '(' . exp ')'

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 69
    constant          go to state 58
    boolean_constant  go to state 59


state 50

   49 exp: error .
   54 condexp: error .

    THEN      reduce using rule 54 (condexp)
    DO        reduce using rule 54 (condexp)
    $default  reduce using rule 49 (exp)


state 51

   57 boolean_constant: TRUE .

    $default  reduce using rule 57 (boolean_constant)


state 52

   58 boolean_constant: FALSE .

    $default  reduce using rule 58 (boolean_constant)


state 53

   46 exp: ID .
   47    | ID . '[' exp ']'

    '['  shift, and go to state 70

    $default  reduce using rule 46 (exp)


state 54

   55 constant: ICONST .

    $default  reduce using rule 55 (constant)


state 55

   45 exp: '(' . exp ')'

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 71
    constant          go to state 58
    boolean_constant  go to state 59


state 56

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp
   50 condexp: exp . NEQ exp
   51        | exp . EQ exp
   52        | exp . LT exp
   53        | exp . LEQ exp

    EQ    shift, and go to state 72
    NEQ   shift, and go to state 73
    LT    shift, and go to state 74
    LEQ   shift, and go to state 75
    AND   shift, and go to state 76
    OR    shift, and go to state 77
    EXOR  shift, and go to state 78
    '+'   shift, and go to state 79
    '-'   shift, and go to state 80
    '*'   shift, and go to state 81


state 57

   30 ifhead: IF condexp .

    $default  reduce using rule 30 (ifhead)


state 58

   48 exp: constant .

    $default  reduce using rule 48 (exp)


state 59

   56 constant: boolean_constant .

    $default  reduce using rule 56 (constant)


state 60

   35 fstmt: FOR ID . ASG ICONST ',' ICONST DO astmt

    ASG  shift, and go to state 82


state 61

   34 wstmt: WHILE $@4 . condexp $@5 DO stmt

    error   shift, and go to state 50
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 56
    condexp           go to state 83
    constant          go to state 58
    boolean_constant  go to state 59


state 62

   38 lvalue: ID '[' . exp ']'

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 84
    constant          go to state 58
    boolean_constant  go to state 59


state 63

   26 cmpdstmt: $@2 BEG stmtlist END .

    $default  reduce using rule 26 (cmpdstmt)


state 64

   16 stmtlist: stmtlist ';' . stmt

    WRITELN  shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    WHILE    shift, and go to state 35
    ID       shift, and go to state 36

    $default  reduce using rule 25 ($@2)

    stmt       go to state 85
    cmpdstmt   go to state 39
    $@2        go to state 16
    ifstmt     go to state 40
    ifhead     go to state 41
    writestmt  go to state 42
    wstmt      go to state 43
    fstmt      go to state 44
    astmt      go to state 45
    lvalue     go to state 46


state 65

   27 ifstmt: ifhead THEN . stmt
   29       | ifhead THEN . stmt ELSE $@3 stmt

    WRITELN  shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    WHILE    shift, and go to state 35
    ID       shift, and go to state 36

    $default  reduce using rule 25 ($@2)

    stmt       go to state 86
    cmpdstmt   go to state 39
    $@2        go to state 16
    ifstmt     go to state 40
    ifhead     go to state 41
    writestmt  go to state 42
    wstmt      go to state 43
    fstmt      go to state 44
    astmt      go to state 45
    lvalue     go to state 46


state 66

   36 astmt: lvalue ASG . exp

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 87
    constant          go to state 58
    boolean_constant  go to state 59


state 67

   12 type: ARRAY '[' ICONST . RANGE ICONST ']' OF stype

    RANGE  shift, and go to state 88


state 68

   49 exp: error .

    $default  reduce using rule 49 (exp)


state 69

   31 writestmt: WRITELN '(' exp . ')'
   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp

    AND   shift, and go to state 76
    OR    shift, and go to state 77
    EXOR  shift, and go to state 78
    '+'   shift, and go to state 79
    '-'   shift, and go to state 80
    '*'   shift, and go to state 81
    ')'   shift, and go to state 89


state 70

   47 exp: ID '[' . exp ']'

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 90
    constant          go to state 58
    boolean_constant  go to state 59


state 71

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp
   45    | '(' exp . ')'

    AND   shift, and go to state 76
    OR    shift, and go to state 77
    EXOR  shift, and go to state 78
    '+'   shift, and go to state 79
    '-'   shift, and go to state 80
    '*'   shift, and go to state 81
    ')'   shift, and go to state 91


state 72

   51 condexp: exp EQ . exp

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 92
    constant          go to state 58
    boolean_constant  go to state 59


state 73

   50 condexp: exp NEQ . exp

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 93
    constant          go to state 58
    boolean_constant  go to state 59


state 74

   52 condexp: exp LT . exp

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 94
    constant          go to state 58
    boolean_constant  go to state 59


state 75

   53 condexp: exp LEQ . exp

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 95
    constant          go to state 58
    boolean_constant  go to state 59


state 76

   42 exp: exp AND . exp

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 96
    constant          go to state 58
    boolean_constant  go to state 59


state 77

   43 exp: exp OR . exp

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 97
    constant          go to state 58
    boolean_constant  go to state 59


state 78

   44 exp: exp EXOR . exp

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 98
    constant          go to state 58
    boolean_constant  go to state 59


state 79

   39 exp: exp '+' . exp

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 99
    constant          go to state 58
    boolean_constant  go to state 59


state 80

   40 exp: exp '-' . exp

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 100
    constant          go to state 58
    boolean_constant  go to state 59


state 81

   41 exp: exp '*' . exp

    error   shift, and go to state 68
    TRUE    shift, and go to state 51
    FALSE   shift, and go to state 52
    ID      shift, and go to state 53
    ICONST  shift, and go to state 54
    '('     shift, and go to state 55

    exp               go to state 101
    constant          go to state 58
    boolean_constant  go to state 59


state 82

   35 fstmt: FOR ID ASG . ICONST ',' ICONST DO astmt

    ICONST  shift, and go to state 102


state 83

   34 wstmt: WHILE $@4 condexp . $@5 DO stmt

    $default  reduce using rule 33 ($@5)

    $@5  go to state 103


state 84

   38 lvalue: ID '[' exp . ']'
   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp

    AND   shift, and go to state 76
    OR    shift, and go to state 77
    EXOR  shift, and go to state 78
    '+'   shift, and go to state 79
    '-'   shift, and go to state 80
    '*'   shift, and go to state 81
    ']'   shift, and go to state 104


state 85

   16 stmtlist: stmtlist ';' stmt .

    $default  reduce using rule 16 (stmtlist)


state 86

   27 ifstmt: ifhead THEN stmt .
   29       | ifhead THEN stmt . ELSE $@3 stmt

    ELSE  shift, and go to state 105

    $default  reduce using rule 27 (ifstmt)


state 87

   36 astmt: lvalue ASG exp .
   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp

    AND   shift, and go to state 76
    OR    shift, and go to state 77
    EXOR  shift, and go to state 78
    '+'   shift, and go to state 79
    '-'   shift, and go to state 80
    '*'   shift, and go to state 81

    $default  reduce using rule 36 (astmt)


state 88

   12 type: ARRAY '[' ICONST RANGE . ICONST ']' OF stype

    ICONST  shift, and go to state 106


state 89

   31 writestmt: WRITELN '(' exp ')' .

    $default  reduce using rule 31 (writestmt)


state 90

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp
   47    | ID '[' exp . ']'

    AND   shift, and go to state 76
    OR    shift, and go to state 77
    EXOR  shift, and go to state 78
    '+'   shift, and go to state 79
    '-'   shift, and go to state 80
    '*'   shift, and go to state 81
    ']'   shift, and go to state 107


state 91

   45 exp: '(' exp ')' .

    $default  reduce using rule 45 (exp)


state 92

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp
   51 condexp: exp EQ exp .

    AND   shift, and go to state 76
    OR    shift, and go to state 77
    EXOR  shift, and go to state 78
    '+'   shift, and go to state 79
    '-'   shift, and go to state 80
    '*'   shift, and go to state 81

    $default  reduce using rule 51 (condexp)


state 93

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp
   50 condexp: exp NEQ exp .

    AND   shift, and go to state 76
    OR    shift, and go to state 77
    EXOR  shift, and go to state 78
    '+'   shift, and go to state 79
    '-'   shift, and go to state 80
    '*'   shift, and go to state 81

    $default  reduce using rule 50 (condexp)


state 94

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp
   52 condexp: exp LT exp .

    AND   shift, and go to state 76
    OR    shift, and go to state 77
    EXOR  shift, and go to state 78
    '+'   shift, and go to state 79
    '-'   shift, and go to state 80
    '*'   shift, and go to state 81

    $default  reduce using rule 52 (condexp)


state 95

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp
   53 condexp: exp LEQ exp .

    AND   shift, and go to state 76
    OR    shift, and go to state 77
    EXOR  shift, and go to state 78
    '+'   shift, and go to state 79
    '-'   shift, and go to state 80
    '*'   shift, and go to state 81

    $default  reduce using rule 53 (condexp)


state 96

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   42    | exp AND exp .
   43    | exp . OR exp
   44    | exp . EXOR exp

    $default  reduce using rule 42 (exp)


state 97

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   43    | exp OR exp .
   44    | exp . EXOR exp

    AND  shift, and go to state 76
    '*'  shift, and go to state 81

    $default  reduce using rule 43 (exp)


state 98

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp
   44    | exp EXOR exp .

    AND  shift, and go to state 76
    '*'  shift, and go to state 81

    $default  reduce using rule 44 (exp)


state 99

   39 exp: exp . '+' exp
   39    | exp '+' exp .
   40    | exp . '-' exp
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp

    AND  shift, and go to state 76
    '*'  shift, and go to state 81

    $default  reduce using rule 39 (exp)


state 100

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   40    | exp '-' exp .
   41    | exp . '*' exp
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp

    AND  shift, and go to state 76
    '*'  shift, and go to state 81

    $default  reduce using rule 40 (exp)


state 101

   39 exp: exp . '+' exp
   40    | exp . '-' exp
   41    | exp . '*' exp
   41    | exp '*' exp .
   42    | exp . AND exp
   43    | exp . OR exp
   44    | exp . EXOR exp

    $default  reduce using rule 41 (exp)


state 102

   35 fstmt: FOR ID ASG ICONST . ',' ICONST DO astmt

    ','  shift, and go to state 108


state 103

   34 wstmt: WHILE $@4 condexp $@5 . DO stmt

    DO  shift, and go to state 109


state 104

   38 lvalue: ID '[' exp ']' .

    $default  reduce using rule 38 (lvalue)


state 105

   29 ifstmt: ifhead THEN stmt ELSE . $@3 stmt

    $default  reduce using rule 28 ($@3)

    $@3  go to state 110


state 106

   12 type: ARRAY '[' ICONST RANGE ICONST . ']' OF stype

    ']'  shift, and go to state 111


state 107

   47 exp: ID '[' exp ']' .

    $default  reduce using rule 47 (exp)


state 108

   35 fstmt: FOR ID ASG ICONST ',' . ICONST DO astmt

    ICONST  shift, and go to state 112


state 109

   34 wstmt: WHILE $@4 condexp $@5 DO . stmt

    WRITELN  shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    WHILE    shift, and go to state 35
    ID       shift, and go to state 36

    $default  reduce using rule 25 ($@2)

    stmt       go to state 113
    cmpdstmt   go to state 39
    $@2        go to state 16
    ifstmt     go to state 40
    ifhead     go to state 41
    writestmt  go to state 42
    wstmt      go to state 43
    fstmt      go to state 44
    astmt      go to state 45
    lvalue     go to state 46


state 110

   29 ifstmt: ifhead THEN stmt ELSE $@3 . stmt

    WRITELN  shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    WHILE    shift, and go to state 35
    ID       shift, and go to state 36

    $default  reduce using rule 25 ($@2)

    stmt       go to state 114
    cmpdstmt   go to state 39
    $@2        go to state 16
    ifstmt     go to state 40
    ifhead     go to state 41
    writestmt  go to state 42
    wstmt      go to state 43
    fstmt      go to state 44
    astmt      go to state 45
    lvalue     go to state 46


state 111

   12 type: ARRAY '[' ICONST RANGE ICONST ']' . OF stype

    OF  shift, and go to state 115


state 112

   35 fstmt: FOR ID ASG ICONST ',' ICONST . DO astmt

    DO  shift, and go to state 116


state 113

   34 wstmt: WHILE $@4 condexp $@5 DO stmt .

    $default  reduce using rule 34 (wstmt)


state 114

   29 ifstmt: ifhead THEN stmt ELSE $@3 stmt .

    $default  reduce using rule 29 (ifstmt)


state 115

   12 type: ARRAY '[' ICONST RANGE ICONST ']' OF . stype

    INT      shift, and go to state 25
    BOOLEAN  shift, and go to state 27

    stype  go to state 117


state 116

   35 fstmt: FOR ID ASG ICONST ',' ICONST DO . astmt

    ID  shift, and go to state 36

    astmt   go to state 118
    lvalue  go to state 46


state 117

   12 type: ARRAY '[' ICONST RANGE ICONST ']' OF stype .

    $default  reduce using rule 12 (type)


state 118

   35 fstmt: FOR ID ASG ICONST ',' ICONST DO astmt .

    $default  reduce using rule 35 (fstmt)
